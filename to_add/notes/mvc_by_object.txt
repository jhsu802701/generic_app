MIGRATIONS
db/migrate
  20141014183645_create_users.rb
    create_table :users (name, email)
  20141014205756_add_index_to_users_email.rb
    add_index :users, :email
  20141014234032_add_password_digest_to_users.rb
    add_column :users, :password_digest, :string
  20141030174712_add_remember_digest_to_users.rb
    add_column :users, :remember_digest, :string
  20141104004736_add_admin_to_users.rb
    add_column :users, :admin, :boolean, default: false
  20141106193737_add_activation_to_users.rb
    add_column :users, :activation_digest, :string
    add_column :users, :activated, :boolean, default: false
    add_column :users, :activated_at, :datetime
  20141107180258_add_reset_to_users.rb
    add_column :users, :reset_digest, :string
    add_column :users, :reset_sent_at, :datetime

ACCOUNT ACTIVATIONS
app/controllers/account_activations_controller.rb
  def edit
test/controllers/account_activations_controller_test.rb
app/helpers/account_activations_helper.rb
config/routes.rb
  get 'account_activations/edit'
  resources :account_activations, only: [:edit]

APPLICATION
app/controllers/application_controller.rb
  include SessionsHelper
app/helpers/application_helper.rb
  def full_title(page_title = '')

PASSWORD RESETS
app/controllers/password_resets_controller.rb
  before_action :get_user,         only: [:edit, :update]
  before_action :valid_user,       only: [:edit, :update]
  before_action :check_expiration, only: [:edit, :update]
  def new
  def create
  def edit
  def update
  private
    def user_params
    def both_passwords_blank?
    def get_user
    def valid_user
    def check_expiration
app/helpers/password_resets_helper.rb
app/views/password_resets
  edit.html.erb
  new.html.erb
config/routes.rb
  get 'password_resets/new'
  get 'password_resets/edit'
  resources :password_resets,     only: [:new, :create, :edit, :update]

SESSIONS
app/controllers/sessions_controller.rb
  def new
  def create
  def destroy
test/controllers/sessions_controller_test.rb
  test "should get new" do
app/helpers/sessions_helper.rb
  def log_in(user)
  def remember(user)
  def current_user?(user)
  def current_user
  def logged_in?
  def forget(user)
  def log_out
  def redirect_back_or(default)
  def store_location
test/helpers/sessions_helper_test.rb
  def setup
  test "current_user returns right user when session is nil" do
  test "current_user returns nil when remember digest is wrong" do
app/views/sessions/new.html.erb
config/routes.rb
  get 'sessions/new'
  get    'login'   => 'sessions#new'
  post   'login'   => 'sessions#create'
  delete 'logout'  => 'sessions#destroy'

STATIC PAGES
app/controllers/static_pages_controller.rb
  def home
  def help
  def about
  def contact
test/controllers/static_pages_controller_test.rb
  test "should get home" do
  test "should get help" do
  test "should get about" do
  test "should get contact" do
app/helpers/static_pages_helper.rb
app/views/static_pages
  about.html.erb
  contact.html.erb
  help.html.erb
  home.html.erb
config/routes.rb
  root                'static_pages#home'
  get    'help'    => 'static_pages#help'
  get    'about'   => 'static_pages#about'
  get    'contact' => 'static_pages#contact'

USERS
app/controllers/users_controller.rb
  before_action :logged_in_user, only: [:index, :edit, :update, :destroy]
  before_action :correct_user,   only: [:edit, :update]
  before_action :admin_user,     only: :destroy
  def index
  def show
  def new
  def create
  def edit
  def update
  def destroy
  private
    def user_params
    def logged_in_user
    def correct_user
    def admin_user
test/controllers/users_controller_test.rb
  users_controller_test.rb
    def setup
    test "should redirect index when not logged in" do
    test "should get new" do
    test "should redirect edit when not logged in" do  
    test "should redirect update when not logged in" do  
    test "should redirect edit when logged in as wrong user" do 
    test "should redirect update when logged in as wrong user" do
    test "should redirect destroy when not logged in" do
    test "should redirect destroy when logged in as a non-admin" do
app/helpers/users_helper.rb
  def gravatar_for(user, options = { size: 80 })
app/models/user.rb
  attr_accessor :remember_token, :activation_token, :reset_token
  before_save   :downcase_email
  before_create :create_activation_digest
  validates :name,  presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\-.]+\.[a-z]+\z/i
  validates :email, presence: true, length: { maximum: 255 },
                    format: { with: VALID_EMAIL_REGEX },
                    uniqueness: { case_sensitive: false }
  has_secure_password
  validates :password, length: { minimum: 6 }, allow_blank: true
  def User.digest(string)
  def User.new_token
  def remember
  def forget
  def authenticated?(attribute, token)
  def activate
  def send_activation_email
  def create_reset_digest
  def send_password_reset_email
  def password_reset_expired?
  private
    def downcase_email
    def create_activation_digest
test/models/user_test.rb
  def setup
  test "should be valid" do
  test "name should be present" do
  test "email should be present" do
  test "name should not be too long" do
  test "email should not be too long" do
  test "email validation should accept valid addresses" do
  test "email validation should reject invalid addresses" do
  test "email address should be unique" do
  test "password should have a minimum length" do
  test "authenticated? should return false for a user with nil digest" do
app/views/users
  edit.html.erb
  index.html.erb
  new.html.erb
  show.html.erb
  _user.html.erb
database params:
  users (name, email, index, password_digest, remember_digest, admin, 
    activation_digest, activated, activated_at, reset_digest, reset_sent_at)
config/routes.rb
  get    'signup'  => 'users#new'
  resources :users

MAILERS
app/mailers/user_mailer.rb
  def account_activation(user)
  def password_reset(user)
test/mailers/user_mailer_test.rb
  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/account_activation
  def account_activation
  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/password_reset
  def password_reset
test/mailers/previews/user_mailer_preview.rb
  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/account_activation
  def account_activation
  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/password_reset
  def password_reset
app/views/user_mailer.rb
  account_activation.html.erb
  account_activation.text.erb
  password_reset.html.erb
  password_reset.text.erb

LAYOUTS
app/views/layouts
  application.html.erb
  _footer.html.erb
  _header.html.erb
  _shim.html.erb

SHARED VIEWS
app/views/shared
  _error_messages.html.erb

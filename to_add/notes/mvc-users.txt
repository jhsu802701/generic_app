USERS

app/controllers/users_controller.rb
  before_action :logged_in_user, only: [:index, :edit, :update, :destroy]
  before_action :correct_user,   only: [:edit, :update]
  before_action :admin_user,     only: :destroy
  def index
  def show
  def new
  def create
  def edit
  def update
  def destroy
  private
    def user_params
    def logged_in_user
    def correct_user
    def admin_user
test/controllers/users_controller_test.rb
  users_controller_test.rb
    def setup
    test "should redirect index when not logged in" do
    test "should get new" do
    test "should redirect edit when not logged in" do  
    test "should redirect update when not logged in" do  
    test "should redirect edit when logged in as wrong user" do 
    test "should redirect update when logged in as wrong user" do
    test "should redirect destroy when not logged in" do
    test "should redirect destroy when logged in as a non-admin" do
app/helpers/users_helper.rb
  def gravatar_for(user, options = { size: 80 })
app/mailers/user_mailer.rb
  def account_activation(user)
  def password_reset(user)
test/mailers/user_mailer_test.rb
  test "account_activation" do
  test "password_reset" do
test/mailers/previews/user_mailer_preview.rb
  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/account_activation
  def account_activation
  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/password_reset
  def password_reset
app/models/user.rb
  attr_accessor :remember_token, :activation_token, :reset_token
  before_save   :downcase_email
  before_create :create_activation_digest
  validates :name,  presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\-.]+\.[a-z]+\z/i
  validates :email, presence: true, length: { maximum: 255 },
                    format: { with: VALID_EMAIL_REGEX },
                    uniqueness: { case_sensitive: false }
  has_secure_password
  validates :password, length: { minimum: 6 }, allow_blank: true
  def User.digest(string)
  def User.new_token
  def remember
  def forget
  def authenticated?(attribute, token)
  def activate
  def send_activation_email
  def create_reset_digest
  def send_password_reset_email
  def password_reset_expired?
  private
    def downcase_email
    def create_activation_digest
test/models/user_test.rb
  def setup
  test "should be valid" do
  test "name should be present" do
  test "email should be present" do
  test "name should not be too long" do
  test "email should not be too long" do
  test "email validation should accept valid addresses" do
  test "email validation should reject invalid addresses" do
  test "email address should be unique" do
  test "password should have a minimum length" do
  test "authenticated? should return false for a user with nil digest" do
app/views/user_mailer
  account_activation.html.erb
  account_activation.text.erb
  password_reset.html.erb
  password_reset.text.erb
app/views/users
  edit.html.erb
  index.html.erb
  new.html.erb
  show.html.erb
  _user.html.erb
config/routes.rb
  get    'signup'  => 'users#new'
  resources :users

DATABASE
  users (name, email, created_at, updated_at, timestamps, password_digest, remember_digest, admin, activation_digest, activated, activated_at, reset_digest, reset_sent_at)
    index: named "index_users_on_email", based on email (must be unique)
